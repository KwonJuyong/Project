pipeline {
  agent any

  environment {
    COMPOSE_FILE = "docker-compose-jy-v0.yml"
  }

  stages {
    stage('Checkout Code') {
      steps {
        git branch: 'jy_v0_test', credentialsId: 'hyuns-github-token', url: 'git@github.com:LabChain/aprofi_backend.git'
      }
    }

    stage('Create .env File') {
      steps {
        withCredentials([file(credentialsId: 'env_file_aprofi', variable: 'ENV_FILE')]) {
          sh 'cp $ENV_FILE .env'
        }
      }
    }

    stage('Download Required Docker Images') {
      steps {
        sh "docker pull python:3.11"
        sh "docker pull pgvector/pgvector:0.8.0-pg16"
        sh "docker pull dpage/pgadmin4"
      }
    }

    stage('Stop and Remove All Containers') {
      steps {
        sh "docker-compose -f $COMPOSE_FILE down -v --remove-orphans || true"
        sh "docker container prune -f || true"
      }
    }

    stage('Remove Volumes (optional)') {
      steps {
        sh "docker volume rm aprofi_postgres_data_jy aprofi_pgadmin_data_jy || true"
        echo "볼륨 유지 시 위 단계는 오류 무시됨"
      }
    }

    stage('Build & Run Services') {
      steps {
        sh "docker-compose -f $COMPOSE_FILE up -d --build"
      }
    }

    stage('Debug - API Health Check (8003)') {
      steps {
        sh 'curl -fsS http://localhost:8003/docs >/dev/null && echo "API OK" || echo "API is not responding"'
      }
    }

    stage('Debug - DB Connection Check (5447)') {
      steps {
        sh 'docker exec aprofi_postgres_server_ver_jy psql -U labchain -p 5447 -d aprofi_db_jy_test -c "SELECT 1;" || echo "DB Connection Failed"'
      }
    }

    stage('Cleanup (safe)') {
      steps {
        sh "docker system prune -af || true"
      }
    }
  }

  post {
    success {
      echo "✅ Build completed successfully!"
    }
    failure {
      script {
        echo "🚨 Build Failed! Debug commands:"
        echo "docker logs --tail=100 aprofi_fastapi_ver_jy"
        echo "docker logs --tail=100 aprofi_postgres_server_ver_jy"
        echo "docker exec -it aprofi_fastapi_ver_jy /bin/sh"
        echo "docker exec -it aprofi_postgres_server_ver_jy psql -U labchain -p 5447 -d aprofi_db_jy_test"
      }
    }
    always {
      echo "🔄 Pipeline finished."
      sh 'rm -f .env || true'
    }
  }
}
